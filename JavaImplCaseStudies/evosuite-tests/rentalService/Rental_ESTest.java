/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 31 04:28:24 GMT 2017
 */

package rentalService;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Rental_ESTest extends Rental_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Client client0 = new Client("", "");
      Branch branch0 = new Branch("", 0, 0);
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", client0, branch0, branch0, car0);
      arrayList0.add(reservation0);
      arrayList0.add(reservation0);
      rental0.cancelClientReservation("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[5];
      Branch branch0 = new Branch("", 0, 0);
      branchArray0[0] = branch0;
      Branch branch1 = new Branch("_", 0, 0);
      branchArray0[1] = branch1;
      Car car0 = new Car("");
      branch1.at.add(car0);
      rental0.initialise(branchArray0);
      ArrayList<Car> arrayList0 = rental0.showCars("_");
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.showClients("o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rental rental0 = new Rental();
      rental0.reservations = null;
      // Undeclared exception!
      try { 
        rental0.showClientReservations("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.showCars("4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.registerClient("b", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rental rental0 = new Rental();
      rental0.reservations = null;
      // Undeclared exception!
      try { 
        rental0.pickupCar("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.makeReservation("", "", "o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rental rental0 = new Rental();
      rental0.reservations = null;
      // Undeclared exception!
      try { 
        rental0.cancelReservation("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", (Client) null, (Branch) null, (Branch) null, car0);
      arrayList0.add(reservation0);
      // Undeclared exception!
      try { 
        rental0.cancelClientReservation("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Client client0 = new Client("", "");
      Branch branch0 = new Branch("", 0, 0);
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", client0, branch0, branch0, car0);
      arrayList0.add(reservation0);
      rental0.cancelReservation("V");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[0];
      rental0.initialise(branchArray0);
      ArrayList<Car> arrayList0 = rental0.showCars("x");
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[3];
      Branch branch0 = new Branch("", 0, 0);
      branchArray0[0] = branch0;
      Branch branch1 = new Branch("=&,'?>Hd![lD@", 0, 0);
      branchArray0[1] = branch1;
      Branch branch2 = new Branch("u\"qTq[F", 0, 0);
      branchArray0[2] = branch2;
      rental0.initialise(branchArray0);
      rental0.registerClient("u\"qTq[F", "");
      String string0 = rental0.makeReservation("", "u\"qTq[F", "=&,'?>Hd![lD@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[5];
      Branch branch0 = new Branch("", 0, 0);
      branchArray0[0] = branch0;
      Branch branch1 = new Branch("_", 0, 0);
      branchArray0[1] = branch1;
      rental0.initialise(branchArray0);
      ArrayList<Car> arrayList0 = rental0.showCars("_");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[5];
      Branch branch0 = new Branch("fE09}cTjsf&, B@gE", 0, 0);
      branchArray0[0] = branch0;
      rental0.initialise(branchArray0);
      ArrayList<Client> arrayList0 = rental0.showClients("fE09}cTjsf&, B@gE");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Client> arrayList0 = rental0.showClients("");
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Client client0 = new Client("", "");
      Branch branch0 = new Branch("", 0, 0);
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", client0, branch0, branch0, car0);
      arrayList0.add(reservation0);
      ArrayList<Reservation> arrayList1 = rental0.showClientReservations("p");
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Client client0 = new Client("", "");
      Branch branch0 = new Branch("", 0, 0);
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", client0, branch0, branch0, car0);
      arrayList0.add(reservation0);
      ArrayList<Reservation> arrayList1 = rental0.showClientReservations("");
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", (Client) null, (Branch) null, (Branch) null, car0);
      arrayList0.add(reservation0);
      // Undeclared exception!
      try { 
        rental0.dropoffCar("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rental rental0 = new Rental();
      rental0.dropoffCar("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Client client0 = new Client("", "");
      Branch branch0 = new Branch("", 0, 0);
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("_", client0, branch0, branch0, car0);
      arrayList0.add(reservation0);
      rental0.dropoffCar("_");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Client client0 = new Client();
      Branch branch0 = new Branch("", 0, 0);
      Reservation reservation0 = new Reservation("_", client0, branch0, branch0, (Car) null);
      arrayList0.add(reservation0);
      rental0.pickupCar("_");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rental rental0 = new Rental();
      rental0.pickupCar("");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", (Client) null, (Branch) null, (Branch) null, car0);
      arrayList0.add(reservation0);
      rental0.pickupCar("");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Client client0 = new Client("", "");
      Branch branch0 = new Branch("", 0, 0);
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", client0, branch0, branch0, car0);
      arrayList0.add(reservation0);
      rental0.cancelClientReservation("Y");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rental rental0 = new Rental();
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("");
      rental0.reservations = arrayList0;
      Car car0 = new Car("");
      Reservation reservation0 = new Reservation("", (Client) null, (Branch) null, (Branch) null, car0);
      arrayList0.add(reservation0);
      rental0.cancelReservation("");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[3];
      Branch branch0 = new Branch("", 0, 0);
      branchArray0[0] = branch0;
      branchArray0[1] = branch0;
      Branch branch1 = new Branch("u\"qTq[F", 0, 0);
      branchArray0[2] = branch1;
      rental0.initialise(branchArray0);
      String string0 = rental0.makeReservation("", "u\"qTq[F", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rental rental0 = new Rental();
      String string0 = rental0.makeReservation("", "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[3];
      Branch branch0 = new Branch("", 0, 0);
      branchArray0[0] = branch0;
      branchArray0[1] = branchArray0[0];
      Branch branch1 = new Branch("u\"qTq[F", 0, 0);
      branchArray0[2] = branch1;
      rental0.initialise(branchArray0);
      String string0 = rental0.registerClient("u\"qTq[F", "");
      assertEquals("u\"qTq[F_0", string0);
      
      ArrayList<Client> arrayList0 = rental0.showClients("u\"qTq[F");
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[5];
      Branch branch0 = new Branch("", 0, 0);
      branchArray0[0] = branch0;
      branchArray0[1] = branch0;
      branchArray0[2] = branchArray0[0];
      branchArray0[3] = branchArray0[2];
      branchArray0[4] = branch0;
      rental0.branches = branchArray0;
      String string0 = rental0.registerClient("", "");
      assertNull(string0);
  }
}
