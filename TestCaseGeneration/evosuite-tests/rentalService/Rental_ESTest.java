/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 10 21:13:19 GMT 2018
 */

package rentalService;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import rentalService.Branch;
import rentalService.Car;
import rentalService.Client;
import rentalService.Rental;
import rentalService.Reservation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rental_ESTest extends Rental_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      rental0.registerClient("+`hWWW}MlUQf,aJtz(j", "+`hWWW}MlUQf,aJtz(j");
      String string0 = rental0.registerClient("+`hWWW}MlUQf,aJtz(j", "p");
      assertEquals("+`hWWW}MlUQf,aJtz(j_-744", string0);
      
      Boolean boolean0 = rental0.movingABranch("+`hWWW}MlUQf,aJtz(j", "+`hWWW}MlUQf,aJtz(j");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      Branch branch1 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[1] = branch1;
      rental0.branches = branchArray0;
      branch1.city = "4";
      Boolean boolean0 = rental0.movingABranch("4", "+`hWWW}MlUQf,aJtz(j");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client();
      Branch branch0 = new Branch("{V&YC\"Jy8A@YgfNN7TV", (-185), 11);
      Reservation reservation0 = new Reservation("ld:N#~|21WK)", client0, branch0, branch0, (Car) null);
      rental0.reservations.add(reservation0);
      rental0.reservations.add(reservation0);
      // Undeclared exception!
      try { 
        rental0.cancelClientReservation("#Pbt8+$$N/8k5) s/s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      rental0.initialise(branchArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      rental0.registerClient("+`hWWW}MlUQf,aJtz(j", "+`hWWW}MlUQf,aJtz(j");
      ArrayList<Client> arrayList0 = rental0.showClients("+`hWWW}MlUQf,aJtz(j");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      ArrayList<Car> arrayList0 = rental0.showCars("+`hWWW}MlUQf,aJtz(j");
      Car car0 = new Car("");
      arrayList0.add(car0);
      ArrayList<Car> arrayList1 = rental0.showCars("+`hWWW}MlUQf,aJtz(j");
      assertFalse(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.showClients("Ap3N;2hON%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rental rental0 = new Rental();
      rental0.reservations = null;
      // Undeclared exception!
      try { 
        rental0.showClientReservations("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.showCars("{V&YC\"Jy8A@YgfNN7TV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.registerClient("o%`A1M@)xvN!&+1A5I", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.movingABranch((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rental rental0 = new Rental();
      // Undeclared exception!
      try { 
        rental0.makeReservation("", "%l1 F'Y(8I$", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rental rental0 = new Rental();
      rental0.reservations.add((Reservation) null);
      // Undeclared exception!
      try { 
        rental0.cancelReservation("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      Branch branch1 = rental0.getBranch("+`hWWW}MlUQf,aJtz(j");
      assertSame(branch1, branch0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      branchArray0[1] = branch0;
      rental0.branches = branchArray0;
      Branch branch1 = rental0.getBranch("_upnr?@x~%,nuf[p");
      assertNull(branch1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      rental0.branches = branchArray0;
      // Undeclared exception!
      try { 
        rental0.getBranch("+`hWWW}MlUQf,aJtz(j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch branch0 = rental0.getBranch("");
      assertNull(branch0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client();
      Branch branch0 = new Branch("{V&YC\"Jy8A@YgfNN7TV", (-185), 11);
      Reservation reservation0 = new Reservation("ld:N#~|21WK)", client0, branch0, branch0, (Car) null);
      rental0.reservations.add(reservation0);
      Boolean boolean0 = rental0.dropoffCar("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      rental0.registerClient("+`hWWW}MlUQf,aJtz(j", "+`hWWW}MlUQf,aJtz(j");
      String string0 = rental0.makeReservation("4", "+`hWWW}MlUQf,aJtz(j", "+`hWWW}MlUQf,aJtz(j");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      branchArray0[1] = branch0;
      rental0.branches = branchArray0;
      ArrayList<Car> arrayList0 = rental0.showCars("_upnr?@x~%,nuf[p");
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      ArrayList<Client> arrayList0 = rental0.showClients("+`hWWW}MlUQf,aJtz(j");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      branchArray0[1] = branch0;
      rental0.branches = branchArray0;
      ArrayList<Client> arrayList0 = rental0.showClients("[qkZ}x%lw[gt\"xah@cy");
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client();
      client0.cID = "#Pbt8+$$N/8k5) s/s";
      Branch branch0 = new Branch("{V&YC\"Jy8A@YgfNN7TV", (-185), 11);
      Reservation reservation0 = new Reservation("e", client0, branch0, branch0, (Car) null);
      rental0.reservations.add(reservation0);
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("#Pbt8+$$N/8k5) s/s");
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client((String) null, "=+!^J");
      Branch branch0 = new Branch("1 O{sR", (-1786), (-1528617620));
      Car car0 = new Car((String) null);
      Reservation reservation0 = new Reservation("1 3{sR", client0, branch0, branch0, car0);
      rental0.reservations.add(reservation0);
      ArrayList<Reservation> arrayList0 = rental0.showClientReservations("PmsNHN1fs;nRZ2");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      ArrayList<Car> arrayList0 = rental0.showCars("+`hWWW}MlUQf,aJtz(j");
      Car car0 = new Car("");
      boolean boolean0 = arrayList0.add(car0);
      Boolean boolean1 = rental0.movingABranch("+`hWWW}MlUQf,aJtz(j", "+`hWWW}MlUQf,aJtz(j");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      branchArray0[1] = branchArray0[0];
      rental0.branches = branchArray0;
      Boolean boolean0 = rental0.movingABranch("+`hWWW}MlUQf,aJtz(j", "zh0");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      branchArray0[1] = branch0;
      rental0.branches = branchArray0;
      Boolean boolean0 = rental0.movingABranch("4", "+`hWWW}MlUQf,aJtz(j");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client();
      Car car0 = new Car("2YKY(h1Ma(!7LR!");
      Reservation reservation0 = new Reservation("e", client0, (Branch) null, (Branch) null, car0);
      rental0.reservations.add(reservation0);
      // Undeclared exception!
      try { 
        rental0.dropoffCar("e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client();
      Branch branch0 = new Branch("{V&YC\"Jy8A@YgfNN7TV", (-185), 11);
      Reservation reservation0 = new Reservation("e", client0, branch0, branch0, (Car) null);
      rental0.reservations.add(reservation0);
      Boolean boolean0 = rental0.dropoffCar("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("", 2357, 3256);
      ArrayList<Car> arrayList0 = new ArrayList<Car>();
      arrayList0.add((Car) null);
      branch0.at = arrayList0;
      branchArray0[0] = branch0;
      Client client0 = new Client("o%`A1M@)xvN!&+1A5I", "iH");
      Reservation reservation0 = new Reservation("", client0, branchArray0[0], branch0, (Car) null);
      rental0.reservations.add(reservation0);
      // Undeclared exception!
      try { 
        rental0.pickupCar("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rentalService.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Client client0 = new Client("o%`A1M@)xvN!&+1A5I", "iH");
      Reservation reservation0 = new Reservation("", client0, branchArray0[1], branchArray0[0], (Car) null);
      rental0.reservations.add(reservation0);
      Boolean boolean0 = rental0.pickupCar("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rental rental0 = new Rental();
      Boolean boolean0 = rental0.pickupCar("+`hWWW}MlUQf,aJtz(j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client((String) null, "=+!^J");
      Branch branch0 = new Branch("1 O{sR", (-1786), (-1528617620));
      Car car0 = new Car((String) null);
      Reservation reservation0 = new Reservation("1 3{sR", client0, branch0, branch0, car0);
      rental0.reservations.add(reservation0);
      Boolean boolean0 = rental0.pickupCar("1 3{sR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client();
      client0.cID = "#Pbt8+$$N/8k5) s/s";
      Branch branch0 = new Branch("{V&YC\"Jy8A@YgfNN7TV", (-185), 11);
      Reservation reservation0 = new Reservation("ld:N#~|21WK)", client0, branch0, branch0, (Car) null);
      rental0.reservations.add(reservation0);
      Boolean boolean0 = rental0.cancelClientReservation("#Pbt8+$$N/8k5) s/s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client((String) null, (String) null);
      client0.cID = "lDci6Y4rNBlc";
      Branch branch0 = new Branch("1 3{sR", (-1786), (-1473852794));
      Car car0 = new Car((String) null);
      Reservation reservation0 = new Reservation("1 3{sR", client0, branch0, branch0, car0);
      rental0.reservations.add(reservation0);
      Boolean boolean0 = rental0.cancelClientReservation("1 3{sR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rental rental0 = new Rental();
      Client client0 = new Client((String) null, "=+!^J");
      Branch branch0 = new Branch("1 O{sR", (-1786), (-1528617620));
      Car car0 = new Car((String) null);
      Reservation reservation0 = new Reservation("1 3{sR", client0, branch0, branch0, car0);
      rental0.reservations.add(reservation0);
      Boolean boolean0 = rental0.cancelReservation("1 3{sR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rental rental0 = new Rental();
      Boolean boolean0 = rental0.cancelReservation("+`hWWW}MlUQf,aJtz(j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      rental0.branches = branchArray0;
      String string0 = rental0.makeReservation("4", "+`hWWW}MlUQf,aJtz(j", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rental rental0 = new Rental();
      Branch[] branchArray0 = new Branch[2];
      Branch branch0 = new Branch("+`hWWW}MlUQf,aJtz(j", (-745), (-745));
      branchArray0[0] = branch0;
      branchArray0[1] = branch0;
      rental0.branches = branchArray0;
      String string0 = rental0.makeReservation((String) null, "[qk}x%lw[gt\"xah@cy", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rental rental0 = new Rental();
      String string0 = rental0.registerClient("", (String) null);
      assertNull(string0);
  }
}
